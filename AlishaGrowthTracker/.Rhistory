R_MAX_NUM_DLLS=200
method <- 'cforest.importance'
fv <- generateFilterValuesData(task, method = method)
results <- fv$data
results <- results[order(results[,3], decreasing=TRUE),]
head(results)
library(e1071)
data(iris)
attach(iris)
library(MASS)
library(caTools)
SVM_model <- svm(train_data, train_label, probability = TRUE)
pred_prob <- predict(SVM_model, test_data, decision.values = TRUE, probability = TRUE)
heatmap(attr(pred_prob, "probabilities"), Colv = NA, col=viridis(100))
library(party)
library(mlr)
ct <- "group1"
mat.test <- as.data.frame(t(mat))
mat.test$celltype <- group[rownames(mat.test)]==ct
## Define the task
## Specify the type of analysis (e.g. classification) and provide data and response variable
task <- makeClassifTask(data = mat.test, target = "celltype")
R_MAX_NUM_DLLS=200
method <- 'cforest.importance'
fv <- generateFilterValuesData(task, method = method)
results <- fv$data
results <- results[order(results[,3], decreasing=TRUE),]
head(results)
library(e1071)
data(iris)
attach(iris)
library(MASS)
library(caTools)
SVM_model <- svm(train_data, train_label, probability = TRUE)
pred_prob <- predict(SVM_model, test_data, decision.values = TRUE, probability = TRUE)
heatmap(attr(pred_prob, "probabilities"), Colv = NA, col=viridis(100))
train_data
library(e1071)
data(iris)
attach(iris)
library(MASS)
library(caTools)
library(e1071)
data(iris)
attach(iris)
library(MASS)
library(caTools)
heatmap(iris)
library(e1071)
data(iris)
attach(iris)
library(MASS)
library(caTools)
boxplot(iris)
runApp('Vimal_Work/test')
runApp('Vimal_Work/test')
runApp('Vimal_Work/test')
runApp('Vimal_Work/test')
Executing command after closing shiny app
Hi all,
I just started to use shiny apps and I wonder, how to execute something after shiny app closes.
I opened a thread on stack overflow http://stackoverflow.com/questions/29116148/execute-command-after-shinyapp
I already got an answer there but we found a bug in the IDE, since everything works fine in command line or outside of RStudio.
Can you suggest a workaround to make it run?
So here is my minimal example. It produces an error but sometimes prints the graph and sometimes not...
library(dplyr)
library(ggvis)
library(shiny)
library(ggplot2)
df <- data.frame(x=rnorm(10), y=rnorm(10), id=letters[1:10])
server <- function(input, output) {
movie_tooltip <- function(x) {
x$id
}
vis <- reactive({
df %>%
ggvis(~x, ~y) %>%
layer_points(key := ~id) %>%
add_tooltip(movie_tooltip, "hover")
})
vis %>% bind_shiny("plot1")
observe({
if(input$myBtn > 0){
stopApp()
}
})
}
ui <- fluidPage(
ggvisOutput("plot1"),
actionButton("myBtn", "Press ME!")
)
shinyApp(ui = ui, server = server)
Executing command after closing shiny app
Hi all,
I just started to use shiny apps and I wonder, how to execute something after shiny app closes.
I opened a thread on stack overflow http://stackoverflow.com/questions/29116148/execute-command-after-shinyapp
I already got an answer there but we found a bug in the IDE, since everything works fine in command line or outside of RStudio.
Can you suggest a workaround to make it run?
So here is my minimal example. It produces an error but sometimes prints the graph and sometimes not...
library(dplyr)
library(ggvis)
library(shiny)
library(ggplot2)
df <- data.frame(x=rnorm(10), y=rnorm(10), id=letters[1:10])
server <- function(input, output) {
movie_tooltip <- function(x) {
x$id
}
vis <- reactive({
df %>%
ggvis(~x, ~y) %>%
layer_points(key := ~id) %>%
add_tooltip(movie_tooltip, "hover")
})
vis %>% bind_shiny("plot1")
observe({
if(input$myBtn > 0){
stopApp()
}
})
}
ui <- fluidPage(
ggvisOutput("plot1"),
actionButton("myBtn", "Press ME!")
)
shinyApp(ui = ui, server = server)
library(shiny)
Executing command after closing shiny app
Hi all,
I just started to use shiny apps and I wonder, how to execute something after shiny app closes.
I opened a thread on stack overflow http://stackoverflow.com/questions/29116148/execute-command-after-shinyapp
I already got an answer there but we found a bug in the IDE, since everything works fine in command line or outside of RStudio.
Can you suggest a workaround to make it run?
So here is my minimal example. It produces an error but sometimes prints the graph and sometimes not...
library(dplyr)
library(ggvis)
library(shiny)
library(ggplot2)
df <- data.frame(x=rnorm(10), y=rnorm(10), id=letters[1:10])
server <- function(input, output) {
movie_tooltip <- function(x) {
x$id
}
vis <- reactive({
df %>%
ggvis(~x, ~y) %>%
layer_points(key := ~id) %>%
add_tooltip(movie_tooltip, "hover")
})
vis %>% bind_shiny("plot1")
observe({
if(input$myBtn > 0){
stopApp()
}
})
}
ui <- fluidPage(
ggvisOutput("plot1"),
actionButton("myBtn", "Press ME!")
)
shinyApp(ui = ui, server = server)
install.packages("shiny")
library(shiny)
Executing command after closing shiny app
Hi all,
I just started to use shiny apps and I wonder, how to execute something after shiny app closes.
I opened a thread on stack overflow http://stackoverflow.com/questions/29116148/execute-command-after-shinyapp
I already got an answer there but we found a bug in the IDE, since everything works fine in command line or outside of RStudio.
Can you suggest a workaround to make it run?
So here is my minimal example. It produces an error but sometimes prints the graph and sometimes not...
library(dplyr)
library(ggvis)
library(shiny)
library(ggplot2)
df <- data.frame(x=rnorm(10), y=rnorm(10), id=letters[1:10])
server <- function(input, output) {
movie_tooltip <- function(x) {
x$id
}
vis <- reactive({
df %>%
ggvis(~x, ~y) %>%
layer_points(key := ~id) %>%
add_tooltip(movie_tooltip, "hover")
})
vis %>% bind_shiny("plot1")
observe({
if(input$myBtn > 0){
stopApp()
}
})
}
ui <- fluidPage(
ggvisOutput("plot1"),
actionButton("myBtn", "Press ME!")
)
shinyApp(ui = ui, server = server)
Executing command after closing shiny app
Hi all,
I just started to use shiny apps and I wonder, how to execute something after shiny app closes.
I opened a thread on stack overflow http://stackoverflow.com/questions/29116148/execute-command-after-shinyapp
I already got an answer there but we found a bug in the IDE, since everything works fine in command line or outside of RStudio.
Can you suggest a workaround to make it run?
So here is my minimal example. It produces an error but sometimes prints the graph and sometimes not...
library(dplyr)
library(ggvis)
library(shiny)
library(ggplot2)
df <- data.frame(x=rnorm(10), y=rnorm(10), id=letters[1:10])
server <- function(input, output) {
movie_tooltip <- function(x) {
x$id
}
vis <- reactive({
df %>%
ggvis(~x, ~y) %>%
layer_points(key := ~id) %>%
add_tooltip(movie_tooltip, "hover")
})
vis %>% bind_shiny("plot1")
observe({
if(input$myBtn > 0){
stopApp()
}
})
}
ui <- fluidPage(
ggvisOutput("plot1"),
actionButton("myBtn", "Press ME!")
)
shinyApp(ui = ui, server = server)
n = c(2, 3, 5)
n
n = c(2:5)
n
class(n)
y<-matrix(1:20, nrow=5,ncol=4)
y
x = as.list(c(1:10))
x
class(x)
View(flights)
x = as.list(c(1:10))
#### Assignment 1: Create function to calculate average delay provided flight
View(flights)
library(hflights)
#### Assignment 1: Create function to calculate average delay provided flight
View(flights)
hflights
class (hflights)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
flights <- as_tibble(hflights)
library(dplyr)
flights <- as_tibble(hflights)
View(flights)
flights %>% select(UniqueCarrier,DepDelay)
flights %>% select(UniqueCarrier,DepDelay) %>% group_by(UniqueCarrier) %>% summarise(avgDel = mean(DepDelay))
flights %>% select(UniqueCarrier,DepDelay) %>% group_by(UniqueCarrier) %>% na.omit() %>% summarise(avgDel = mean(DepDelay))
avgDeptDelay  <- function(){
avGDepDelay <- flights %>%
select(UniqueCarrier,DepDelay) %>%
group_by(UniqueCarrier) %>%
na.omit() %>%
summarise(avgDel = mean(DepDelay))
return(avGDepDelay)
}
avgDeptDelay
avgDeptDelay()
avgDeptDelayByName  <- function(carrierName){
avGDepDelay <- flights %>%
filter(UniqueCarrier == carrierName) %>%
select(UniqueCarrier,DepDelay) %>%
group_by(UniqueCarrier) %>%
na.omit() %>%
summarise(avgDel = mean(DepDelay))
return(avGDepDelay)
}
avgDeptDelayByName()
avgDeptDelayByName("WN")
?plot
?avgDeptDelayByName
?purrr
?mp
?map
library(purrr)
?map
avgDeptDelayByName  <- function(carrierName){
avGDepDelay <- flights %>%
filter(UniqueCarrier == carrierName) %>%
select(UniqueCarrier,DepDelay) %>%
group_by(UniqueCarrier) %>%
na.omit() %>%
summarise(avgDel = mean(DepDelay))
return(avGDepDelay)
}
avgDeptDelayByName("WN")
flights %>%
select(UniqueCarrier)
flights %>%
select(UniqueCarrier) %>% unique()
carrierList <- flights %>%
select(UniqueCarrier) %>%
unique()
class(carrierList)
avgDeptDelayByName("WN")
class(carrierList)
carrierList %>% class()
carrierList <- flights %>%
select(UniqueCarrier) %>%
unique() %>%
as.list()
carrierList %>% class()
carrierList
allTailNum = flights$tailnum %>%  unique()
flights$tailnum
flights
allTailNum = flights$TailNum %>%  unique()
allTailNum
allTailNum %>%  class()
carrierList <- flights %>%
select(UniqueCarrier) %>%
unique()
carrierList
carrierList <- flights %>%
select(Uniqu
e()
carrierList <- flights %>%
select(UniqueCarrier) %>%
unique()
carrierList
map(carrierList,avgDeptDelayByName)
map(carrierList,avgDeptDelayByName)
avgDeptDelayByName
avgDeptDelayByName()
test  =map(carrierList,avgDeptDelayByName)
test
dataWithMap   =map(carrierList,avgDeptDelayByName)
dataWithoutMap = avGDepDelay()
avgDeptDelay  <- function(){
avGDepDelay <- flights %>%
select(UniqueCarrier,DepDelay) %>%
group_by(UniqueCarrier) %>%
na.omit() %>%
summarise(avgDel = mean(DepDelay))
return(avGDepDelay)
}
avgDeptDelay  <- function(){
avgDepDelay <- flights %>%
select(UniqueCarrier,DepDelay) %>%
group_by(UniqueCarrier) %>%
na.omit() %>%
summarise(avgDel = mean(DepDelay))
return(avgDepDelay)
}
dataWithoutMap = avgDeptDelay()
dataWithMap   =map(carrierList,avgDeptDelayByName)
dataWithoutMap = avgDeptDelay()
dataWithMap %>%  class()
dataWithoutMap %>%  class()
dataWithMap
dataWithoutMap =dataWithoutMap %>%  as.list()
dataWithoutMap %>%  class()
dataWithMap %>%  class()
dataWithoutMap
dataWithMap
dataWithoutMap
dataWithMap
dataWithoutMap = avgDeptDelay()
dataWithoutMap
avgDeptDelayByName  <- function(carrierName){
avGDepDelay <- flights %>%
na.omit() %>%
filter(UniqueCarrier == carrierName) %>%
select(UniqueCarrier,DepDelay) %>%
group_by(UniqueCarrier) %>%
summarise(avgDel = mean(DepDelay))
return(avGDepDelay)
}
avgDeptDelay  <- function(){
avgDepDelay <- flights %>%
na.omit() %>%
select(UniqueCarrier,DepDelay) %>%
group_by(UniqueCarrier) %>%
summarise(avgDel = mean(DepDelay))
return(avgDepDelay)
}
dataWithoutMap = avgDeptDelay()
dataWithMap   =map(carrierList,avgDeptDelayByName)
dataWithoutMap
dataWithMap
avgDeptDelayByName("AA")
dataWithoutMap
avgDeptDelayByName("AA")
map(carrierList,avgDeptDelayByName)
carrierList
carrierList %>%  as.list()
carrierList %>% t() %>%   as.list()
carrierList
carrierList %>%  as.list()
carrierList %>% t()
?as.list
carrierList %>%  as.list()
carrierList %>% t() %>%   as.list()
carrierList = carrierList %>% t() %>%   as.list()
map(carrierList,avgDeptDelayByName)
dataWithoutMap
dataWithMap
dataWithMap %>%  table()
dataWithMap %>%  as.table()
dataWithMap %>%  class()
dataWithoutMap %>%  class()
dataWithoutMap
dataWithoutMap %>%  table()
dataWithoutMap %>%  table()
dataWithoutMap %>%  table()
dataWithoutMap %>%  data.table::data.table()
dataWithoutMap
dataWithoutMap %>%  data.table::data.table()
dataWithoutMap %>%  DT::datatable()
library(DT)
install.packages("DT")
library("DT")
dataWithoutMap %>%  DT::datatable()
dataWithoutMap
ggplot2::ggplot(data = dataWithoutMap, aes(x =UniqueCarrier, y =avgDel,fill= avgDel))
ggplot2::ggplot(data = dataWithoutMap) + aes(x =UniqueCarrier, y =avgDel,fill= avgDel))
ggplot2::ggplot(data = dataWithoutMap) + aes(x =UniqueCarrier, y =avgDel,fill= avgDel)
library(ggplot2)
dataWithoutMap
p<-ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel)) +
geom_bar(stat="identity")
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel))
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel)) +
geom_bar(stat="identity")
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel)) +
geom_boxplot(stat="identity")
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel)) +
geom_bar(stat="identity")
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel, col=UniqueCarrier) +
geom_bar(stat="identity")
)
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel, col=UniqueCarrier) +
geom_bar(stat="identity")
)
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel) +
geom_bar(stat="identity")
)
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel, col=UniqueCarrier)) +
geom_bar(stat="identity")
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel, fill=UniqueCarrier)) +
geom_bar(stat="identity")
UniqueCarrier
dataWithoutMap$UniqueCarrier
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel, fill=UniqueCarrier)) +
geom_tile()
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel, fill=UniqueCarrier)) +
geom_col()
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel, fill=UniqueCarrier)) +
geom_contour()
ggplot(data=dataWithoutMap, aes(x=UniqueCarrier, y=avgDel, fill=UniqueCarrier)) +
geom_crossbar()
dataWithoutMap
data("economics",package="ggplot2")
economics <- data.frame(economics)
head(economics)
class(economics)
ggplot2::ggplot(economics)+geom_line(aes(x=economics$date, y=economics$pce)
1
ggplot(economics) + geom_line(aes(x=date, y=pce, color="pcs")) + geom_line(aes(x=date, y=unemploy, col="unemploy")) + scale_color_discrete(name="Legend") + labs(title="Economics")
ggplot(economics) + geom_line(aes(x=date, y=pce, color="pcs")) + geom_line(aes(x=date, y=unemploy, col="unemploy")) + scale_color_discrete(name="Legend")
ggplot(economics) + geom_line(aes(x=date, y=pce, color="pcs")) + geom_line(aes(x=date, y=unemploy, col="unemploy"))
ggplot(economics) + geom_line(aes(x=date, y=pce, color="pcs"))
ggplot(economics)+geom_line(aes(x=economics$date, y=economics$pce)
1
ggplot(economics)+geom_line(aes(x=economics$date, y=economics$pce)
1
ggplot(economics)+geom_line(aes(x=date, y=pce)
q
ggplot(economics) + geom_line(aes(x=date, y=pce))
ggplot(economics) + geom_line(aes(x=date, y=pce))
library(reshape2)
install.packages("plotly")
ggplot(flights, aes(x=))
View(flights)
ggplot(flights, aes(x=UniqueCarrier, y=DepDelay)) + geom_point(shape=1)
<
flights %>% omit.na %>% ggplot(flights, aes(x=UniqueCarrier, y=DepDelay)) + geom_point(shape=1)
library(dbplyr)
setwd("/Users/vimal/RCoding/ShinyPlayGround/AlishaGrowthTracker/")
shiny::runApp('~/Creative Cloud Files/RCoding/ShinyPlayGround/AlishaGrowthTracker')
runApp('~/Creative Cloud Files/RCoding/ShinyPlayGround/AlishaGrowthTracker')
runApp('~/Creative Cloud Files/RCoding/ShinyPlayGround/AlishaGrowthTracker')
getwd()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
